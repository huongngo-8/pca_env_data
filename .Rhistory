library(tidyverse)
library(ggplot2)
env_ind <- read.csv("https://raw.githubusercontent.com/svteichman/STAT302-WIN2022/main/files/projects/02_dimension_reduction/pca_data.csv")
country_data <- read.csv("https://raw.githubusercontent.com/svteichman/STAT302-WIN2022/main/files/projects/02_dimension_reduction/additional_data.csv")
# Data Setup
# Retrieving dataset that excludes country name column
env_ind_pca <- env_ind[2:30]
# Run PCA on modified Dataset 1 (env_ind) and scaling it, using `run_pca`
reduced_env_ind <- run_pca(env_ind_pca, scale = TRUE)
# Retrieving the matrix of variable loadings from the list of returned elements from `run_pca` and making it a dataframe
env_ind_loadings <- as.data.frame(reduced_env_ind$loadings)
# Mutating a column that contains the environmental indicators to the loadings dataframe and renaming the column
env_ind_loadings <- env_ind_loadings %>%
add_column(colnames(env_ind_pca)) %>%
rename("indicator" = "colnames(env_ind_pca)")
# Retrieving the matrix of principal component vectors from the list of returned elements from `run_pca` and making it a dataframe
env_ind_prin_comps <- as.data.frame(reduced_env_ind$prin_comps)
# Mutating a column that contains the country names to the principal components dataframe and renaming the column
env_ind_prin_comps <- env_ind_prin_comps %>%
add_column(env_ind$country) %>%
rename("country" = "env_ind$country")
# Retrieving the vector of variances explained by each principal component from the list of returned elements from `run_pca` and making it a dataframe
var_prop <- as.data.frame(reduced_env_ind$portion_var)
# Mutating a column that contains the corresponding principal component number to the variances dataframe and renaming the column. Also renaming the column that contains the variances.
var_prop <- var_prop %>%
add_column(c(1:29)) %>%
rename("variance" = "reduced_env_ind$portion_var",
"component" = "c(1:29)")
library(tidyverse)
library(ggplot2)
env_ind <- read.csv("https://raw.githubusercontent.com/svteichman/STAT302-WIN2022/main/files/projects/02_dimension_reduction/pca_data.csv")
country_data <- read.csv("https://raw.githubusercontent.com/svteichman/STAT302-WIN2022/main/files/projects/02_dimension_reduction/additional_data.csv")
# Function: run_pca, performs PCA on a data matrix
# Input: X, must be a dataframe or matrix; scale, must be logical value
# Output: List of elements
# prin_comps - matrix with the same dimensions as X that contains the principal components vectors
# loadings - matrix of variable loadings, should be a square matrix where the number of rows and columns are equal to the number of columns of X
# portion_var - vector of variances explained by each principal component
run_pca <- function(X, scale) {
# Checks that X is a matrix
if (!is.matrix(X)) {
# Checks that X is a dataframe, if not a matrix
if (!is.data.frame(X)) {
stop("X must be a matrix or dataframe!")
}
}
# Checks that scale is a logical value
if (!is.logical(scale)) {
stop("scale must be a logical value!")
}
# In the case that X is a dataframe, we will convert it to a matrix
X <- as.matrix(X)
# Checks if scale is true
if(scale == TRUE) {
# For each variable
for (i in 1:ncol(X)) {
# Calculate mean of the variable
mean = mean(X[, i])
# Calculate standard deviation of the variable
sd = sd(X[, i])
# For each observation
for (j in 1:nrow(X)) {
# Calculate the subtraction of the mean from the observation value and division of the standard deviation
X[j, i] <- (X[j, i] - mean) / sd
}
}
# Otherwise (scale is not true)
} else {
# For each variable
for (i in 1:ncol(X)) {
# Calculate mean of the variable
mean = mean(X[, i])
# For each observation
for (j in 1:nrow(X)) {
# Calculate the subtraction of the mean from the observation value
X[j, i] <- (X[j, i] - mean)
}
}
}
# Using `cov` to generate the empirical covariance matrix of the data matrix X
cov_mat <- cov(X)
# Using eigen() to perform eigendecomposition of covariance matrix
decomp_mat <- eigen(cov_mat)
# Saving the vector of variances to a variable
portion_var <- decomp_mat$values
# Saving the matrix of principal component vectors to a variable
loadings <- decomp_mat$vectors
# Saving the matrix of loadings to a variable
prin_comps <- X %*% loadings
# Creating a list that contains the loadings matrix, principal components matrix and variances vector to be returned
result <- list("loadings" = loadings,
"prin_comps" = prin_comps,
"portion_var" = portion_var)
return(result)
}
# Data Setup
# Retrieving dataset that excludes country name column
env_ind_pca <- env_ind[2:30]
# Run PCA on modified Dataset 1 (env_ind) and scaling it, using `run_pca`
reduced_env_ind <- run_pca(env_ind_pca, scale = TRUE)
# Retrieving the matrix of variable loadings from the list of returned elements from `run_pca` and making it a dataframe
env_ind_loadings <- as.data.frame(reduced_env_ind$loadings)
# Mutating a column that contains the environmental indicators to the loadings dataframe and renaming the column
env_ind_loadings <- env_ind_loadings %>%
add_column(colnames(env_ind_pca)) %>%
rename("indicator" = "colnames(env_ind_pca)")
# Retrieving the matrix of principal component vectors from the list of returned elements from `run_pca` and making it a dataframe
env_ind_prin_comps <- as.data.frame(reduced_env_ind$prin_comps)
# Mutating a column that contains the country names to the principal components dataframe and renaming the column
env_ind_prin_comps <- env_ind_prin_comps %>%
add_column(env_ind$country) %>%
rename("country" = "env_ind$country")
# Retrieving the vector of variances explained by each principal component from the list of returned elements from `run_pca` and making it a dataframe
var_prop <- as.data.frame(reduced_env_ind$portion_var)
# Mutating a column that contains the corresponding principal component number to the variances dataframe and renaming the column. Also renaming the column that contains the variances.
var_prop <- var_prop %>%
add_column(c(1:29)) %>%
rename("variance" = "reduced_env_ind$portion_var",
"component" = "c(1:29)")
# Figure 1
# Loadings for First Two Principal Components
ggplot(data = env_ind_loadings,
aes(x = V1,
y = V2,
label = indicator)) +
geom_point() +
geom_text(size = 4,
nudge_x = 0.02,
nudge_y = 0.01,
color = "red") +
geom_vline(xintercept = 0, color = "grey") +
geom_hline(yintercept = 0, color = "grey") +
labs(title = "Loadings for First Two Principal Components",
x = "Loadings for Principal Component 1",
y = "Loadings for Principal Component 2") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Figure 2
# First Two Principal Components
text_df <- env_ind_prin_comps %>%
filter(country %in% c("United States of America",
"South Korea",
"Viet Nam",
"China",
"Germany",
"Japan",
"Thailand",
"Sweden"))
ggplot(data = env_ind_prin_comps,
aes(x = V1,
y = V2,
label = country)) +
geom_point() +
geom_text(data = text_df,
size = 4,
nudge_x = .12,
nudge_y = .12,
color = "red") +
geom_vline(xintercept = 0, color = "grey") +
geom_hline(yintercept = 0, color = "grey") +
labs(title = "First Two Principal Components",
x = "Principal Component 1",
y = "Principal Component 2") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Figure 2
# First Two Principal Components
text_df <- env_ind_prin_comps %>%
filter(country %in% c("United States of America",
"South Korea",
"Viet Nam",
"China",
"Germany",
"Japan",
"Thailand",
"Sweden"))
ggplot(data = env_ind_prin_comps,
aes(x = V1,
y = V2,
label = country)) +
geom_point() +
geom_text(data = text_df,
size = 4,
nudge_x = .12,
nudge_y = .12,
color = "red") +
geom_vline(xintercept = 0, color = "grey") +
geom_hline(yintercept = 0, color = "grey") +
labs(title = "First Two Principal Components",
x = "Principal Component 1",
y = "Principal Component 2") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Figure 3
# Scree Plot
ggplot(data = var_prop, aes(x = component,
y = variance)) +
geom_point(size = 2) +
geom_line() +
labs(title = "Scree Plot",
x = "Component",
y = "Variance Explained") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
scale_x_continuous(n.breaks = 29)
# Figure 4
# First Two Principal Components (Categorized by Geographical Region)
plot_df <- data.frame(pc1 = env_ind_prin_comps$V1,
pc2 = env_ind_prin_comps$V2,
region = country_data$region)
ggplot(data = plot_df, aes(x = pc1,
y = pc2,
color = as.factor(region))) +
geom_point(size = 2) +
labs(title = "First Two Principal Components",
subtitle = "Categorized by Geographical Region",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Region") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "bold"))
# Figure 5
# First Two Principal Components (Categorized by GDP)
plot_df_2 <- data.frame(pc1 = env_ind_prin_comps$V1,
pc2 = env_ind_prin_comps$V2,
gdp = country_data$gdp)
ggplot(data = plot_df_2 %>%
filter(!is.na(gdp)), aes(x = pc1,
y = pc2,
color = gdp)) +
geom_point(size = 2) +
labs(title = "First Two Principal Components",
subtitle = "Categorized by GDP",
x = "Principal Component 1",
y = "Principal Component 2",
color = "GDP") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "bold")) +
scale_color_continuous(low = "blue", high = "red")
# Figure 6
# First Two Principal Components (Categorized by Developed Country Type)
plot_df_3 <- data.frame(pc1 = env_ind_prin_comps$V1,
pc2 = env_ind_prin_comps$V2,
ldc = country_data$ldc)
plot_df_3 <- plot_df_3 %>% mutate(ldc_desc = case_when(ldc == 0 ~ "Developed Country",
ldc == 1 ~ "Less Developed Country"))
ggplot(data = plot_df_3, aes(x = pc1,
y = pc2,
color = as.factor(ldc_desc))) +
geom_point(size = 2) +
labs(title = "First Two Principal Components",
subtitle = "Categorized by Developed Country Type",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Developed Country Type") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "bold"))
# Figure 7
# Composite Indicator of Environmental Performance (EPI) vs. First Principal Component
plot_df_4 <- data.frame(pc1 = env_ind_prin_comps$V1,
epi_cat = country_data$EPI_cat)
ggplot(data = plot_df_4, aes(x = pc1, y = epi_cat)) +
geom_point(size = 2) +
geom_smooth(method = lm, se = FALSE) +
labs(title = "Composite Indicator of Environmental Performance (EPI) vs. First Principal Component",
x = "Principal Component 1",
y = "EPI_cat") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
# Calculate correlation matrix using `cor`
cor(plot_df_4)
